from __future__ import annotations

from typing import List

from fastapi import FastAPI

from .models import InvoicePayload, ValidationIssue, ValidationResult

app = FastAPI(title="{{ spec.app.name }} Backend", version="{{ spec.app.version }}")


VALIDATION_RULES: List[ValidationIssue] = [
    {% for rule in spec.backend.validation_rules %}
    ValidationIssue(rule_id="{{ rule.id }}", message="{{ rule.description }}", severity="{{ rule.severity }}"),
    {% endfor %}
]


@app.post("/api/invoice/verify", response_model=ValidationResult)
def verify_invoice(payload: InvoicePayload) -> ValidationResult:
    issues: List[ValidationIssue] = []

    for rule in VALIDATION_RULES:
        if rule.rule_id == "amount-threshold" and payload.amount > 1_000_000:
            issues.append(ValidationIssue(
                rule_id=rule.rule_id,
                message=f"金額 {payload.amount:.0f} {payload.currency} がしきい値を超過しました",
                severity=rule.severity,
            ))
        elif rule.rule_id == "duplicate-check" and payload.invoice_number.endswith("-DUP"):
            issues.append(ValidationIssue(
                rule_id=rule.rule_id,
                message="請求書番号が重複パターン (-DUP) と一致しました",
                severity=rule.severity,
            ))
        else:
            # そのほかのルールは説明のみ返却
            issues.append(rule.copy())

    is_valid = all(issue.severity != "critical" for issue in issues)

    return ValidationResult(
        invoice_number=payload.invoice_number,
        is_valid=is_valid,
        issues=issues,
        next_steps="Playwright テストで UI/CLI からの検証を継続してください。",
    )


@app.get("/")
def healthcheck() -> dict:
    return {"status": "ok", "service": "{{ spec.app.slug }}"}

